import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.jetbrains.kotlin.jvm' version "1.3.72"
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = project.property('pluginGroup')
version = project.property('version')

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }
    maven {
        name = 'CodeMC-Repo'
        url 'http://repo.codemc.io/repository/maven-public'
    }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.bstats.org/content/repositories/releases' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.15.1-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72'
    compileOnly group: 'com.github.shatteredsuite', name: 'core', version: '1.1.0', classifier: ''
    // This lets us use the full ShatteredCore in the standalone.
    compileOnly group: 'com.github.shatteredsuite', name: 'core', version: '1.1.0', classifier: 'dist'
}

artifacts {
    archives shadowJar
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

// Creates a jar that can be run without ShatteredCore being installed.
task standaloneJar(type: ShadowJar) {
    from sourceSets.main.output
    classifier = 'standalone'
    dependencies {
        include(dependency('com.github.shatteredsuite:core:.*:dist'))
    }
    configurations = [project.configurations.runtime]
}

// Creates a jar that includes dependencies, for use on servers.
task distJar(type: ShadowJar) {
    from sourceSets.main.output
    dependencies {
        exclude(dependency(".*:.*")) // Comment this line out and fill in the next line:
//        include()
    }
    classifier = 'dist'
    configurations = [project.configurations.runtime]
}

task allJars() {
    dependsOn standaloneJar, distJar, jar, javadocJar, sourcesJar
}

// Calculates the git hash and adds it to the version.
task getHash {
    def p1 = 'git rev-parse --short HEAD'.execute()
    p1.waitFor()
    getHash.ext.hash = p1.text
}

// Replaces placeholders in plugin.yml
processResources {
    dependsOn getHash
    def hash = getHash.hash
    with copySpec{
        from 'src/main/resources'
        filter(ReplaceTokens, tokens: [description: project.property('description'),
                                       projectName: project.property('projectName'),
                                       pluginName : project.property('pluginName'),
                                       version    : project.version + ' (' + hash.trim() + ')'])
    }
}

// Allows for publication to maven.
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = project.property("projectName")
            artifact javadocJar
            artifact sourcesJar
            artifact standaloneJar
            artifact distJar
            artifact jar
            pom {
                name = project.property("projectName")
                description = project.property('description')
                url = 'https://github.com/ShatteredSuite/' + project.property("pluginName")
                developers {
                    developer {
                        id = 'UberPilot'
                        name = 'UberPilot'
                        email = 'uberpilot99@gmail.com'
                    }
                }
            }
        }
    }
}
